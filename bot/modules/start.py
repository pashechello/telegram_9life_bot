from telegram import Update, ParseMode, ChatAction, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, 
    MessageHandler, 
    CommandHandler, 
    ConversationHandler, 
    Filters, 
    CallbackQueryHandler  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
)
from bot import SUPPORT_CHANNEL, LOGGER, updater, dispatcher
from bot.modules.helper_funcs.text import ERROR, START_MESSAGE
from bot.modules.helper_funcs.decorators import send_action, contest
from bot.modules.helper_funcs.markup import start_markup
from bot.modules.sql.user_sql import get_users_id, add_referral, add_user
from bot.modules.sql.shill_sql import get_welcome

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
VALIDATE, START_OVER = range(2)

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
CHANNEL_URL = "https://t.me/ztmvta"

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
SUBSCRIBE_BUTTON = InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 9 –ñ–∏–∑–Ω–µ–π", url=CHANNEL_URL)
JOIN_BUTTON = InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ", callback_data="join")

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
SUBSCRIBE_MARKUP = InlineKeyboardMarkup([[SUBSCRIBE_BUTTON], [JOIN_BUTTON]])

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∏–∫–µ—Ä–∞
STICKER_ID = "CAACAgIAAxkBAAEK0rBnWICOB8ErBSctj6JREr_p3ki1dQACuWMAAks2wUrffFJ8FgGEFTYE"


@send_action(ChatAction.TYPING)
def start(update: Update, context: CallbackContext):
    context.user_data[START_OVER] = update.message
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    update.message.reply_sticker(sticker=STICKER_ID)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
    update.message.reply_text(
        START_MESSAGE,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[JOIN_BUTTON]])
    )
    return VALIDATE


def validate_user(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    is_in_grp = context.bot.get_chat_member(f"@{SUPPORT_CHANNEL}", update.effective_user.id)
    if is_in_grp.status not in ['member', 'creator', 'administrator']:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        query.edit_message_text(
            ERROR,
            parse_mode=ParseMode.HTML,
            reply_markup=SUBSCRIBE_MARKUP
        )
        return VALIDATE

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é valid_user
    valid_user(update, context)
    return -1


@send_action(ChatAction.TYPING)
@contest
def valid_user(update: Update, context: CallbackContext):
    data = context.user_data.get(START_OVER)
    welcome = get_welcome()
    ref_id = data.text[7:] if data else ""

    if ref_id and data and data.chat.id not in get_users_id():
        add_referral(int(ref_id))

    add_user(data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
    context.bot.send_photo(
        update.effective_message.chat_id,
        welcome.image,
        caption=welcome.text,
        parse_mode=ParseMode.HTML,
        reply_markup=start_markup()
    )
    return -1


@send_action(ChatAction.TYPING)
def back(update: Update, context: CallbackContext):
    context.bot.send_message(
        update.message.chat.id,
        f"Hey {update.message.chat.first_name}",
        reply_markup=start_markup()
    )


__mod_name__ = 'start'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
START_HANDLER = ConversationHandler(
    entry_points=[CommandHandler('start', start, pass_args=True)],
    states={
        VALIDATE: [
            MessageHandler(Filters.regex('^‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ$'), validate_user, pass_user_data=True),
            CallbackQueryHandler(validate_user, pattern='^join$')
        ]
    },
    fallbacks=[]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
BACK_HANDLER = MessageHandler(Filters.regex('^üîô Back$'), back)

dispatcher.add_handler(START_HANDLER)
dispatcher.add_handler(BACK_HANDLER)